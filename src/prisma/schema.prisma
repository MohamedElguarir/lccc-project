datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String?

  role    Role      @default(USER)
  Article Article[]
}

enum Status {
  DRAFT
  PUBLISHED
}

model Project {
  id              String            @id @default(cuid())
  title           String
  slug            String
  description     String
  status          Status            @default(DRAFT)
  images          String[]
  client          String
  json            Json
  startDate       DateTime
  endDate         DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ProjectCategory ProjectCategory[]
}

model ProjectCategory {
  id        String    @id @default(cuid())
  name      String
  slug      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Project   Project?  @relation(fields: [projectId], references: [id])
  projectId String?
}

model Service {
  id                String          @id @default(cuid())
  name              String
  slug              String
  description       String?
  json              Json
  Image             String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  category          ServiceCategory @relation(fields: [serviceCategoryId], references: [id])
  serviceCategoryId String
}

model ServiceCategory {
  id        String    @id @default(cuid())
  name      String
  slug      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Service   Service[]
}

model Article {
  id          String       @id @default(cuid())
  title       String
  description String?
  body        String?
  status      Status       @default(DRAFT)
  json        Json
  coverImage  String?
  slug        String?      @unique
  publishedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  authorId    String
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags        ArticleTag[]

  @@index([slug], name: "Article_slug")
  @@index([authorId], name: "Article_authorId")
}

model ArticleTag {
  articleId String
  tagId     String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([tagId])
}

model Tag {
  id       String       @id @default(cuid())
  name     String
  slug     String       @unique
  articles ArticleTag[]

  @@index([slug], name: "Tag_slug")
}

enum Role {
  ADMIN
  USER
}
