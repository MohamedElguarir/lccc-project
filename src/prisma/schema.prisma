datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  admin
  user
}

enum ArticleStatus {
  draft
  submitted
  revisions_requested
  published
}

enum EventStatus {
  draft
  published
}

model Event {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  excerpt     String
  mainImage   String
  location    String
  description Json
  status      EventStatus @default(draft)
  eventDate   DateTime
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model User {
  id         String    @id @default(cuid())
  first_name String
  last_name  String
  username   String    @unique
  email      String    @unique
  avatar_url String?
  role       Role      @default(user)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  profile    Profile?  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId  String?
  articles   Article[]
  comments   Comment[]
  likes      Like[]

  @@index([profileId])
}

model Profile {
  id        String   @id @default(cuid())
  userId    String
  bio       String?  @db.Text
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User[]
  twitter   String?
  facebook  String?
  instagram String?
  github    String?
}

model Article {
  id          String        @id @default(cuid())
  title       String?
  slug        String?       @unique
  excerpt     String?       @db.Text
  content     Json?
  main_image  String?       @db.Text
  status      ArticleStatus @default(draft)
  publishedAt DateTime?
  approved    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  userId      String
  category    Category?     @relation(fields: [categoryId], references: [id])
  categoryId  String?
  tags        ArticleTag[]
  comments    Comment[]
  author      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Revision    Revision[]

  @@index([categoryId])
  @@index([userId])
}

model Revision {
  id        String   @id @default(cuid())
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
  body      String   @db.Text
  resolved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([articleId])
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  commentId String
  
  comment   Comment  @relation(fields: [commentId], references: [id])
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  @@index([commentId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  body      String
  edited    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  articleId String
  parentId  String?

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  article  Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Comment[] @relation("CommentToComment")
  likes     Like[]

  @@index([parentId])
  @@index([userId])
  @@index([articleId])
}

model Tag {
  id        String       @id @default(cuid())
  name      String       @unique
  slug      String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  articles  ArticleTag[]
}

model ArticleTag {
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     String

  @@id([articleId, tagId])
  @@index([articleId])
  @@index([tagId])
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  article   Article[]
}
