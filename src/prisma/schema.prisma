datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  admin
  user
}

enum ArticleStatus {
  draft
  submitted
  revisions_requested
  published
}

model User {
  id         String    @id @default(cuid())
  first_name String
  last_name  String
  username   String    @unique
  email      String    @unique
  avatar_url String?
  role       Role      @default(user)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  profile    Profile?  @relation(fields: [profileId], references: [id])
  profileId  String?
  articles   Article[]
  comments   Comment[]
}

model Profile {
  id        String   @id @default(cuid())
  userId    String
  bio       String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User[]
  twitter   String?
  facebook  String?
  instagram String?
  github    String?
}

model Article {
  id          String        @id @default(cuid())
  title       String?
  slug        String?
  excerpt     String?
  content     Json?
  main_image  String?
  status      ArticleStatus @default(draft)
  publishedAt DateTime?
  approved    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  userId      String
  category    Category?     @relation(fields: [categoryId], references: [id])
  categoryId  String?
  tags        ArticleTag[]
  comments    Comment[]
  author      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String    @id @default(cuid())
  body      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  Article   Article   @relation(fields: [articleId], references: [id])
  articleId String
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  parentId  String?
  children  Comment[] @relation("CommentToComment")
}

model Tag {
  id        String       @id @default(cuid())
  name      String       @unique
  slug      String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  articles  ArticleTag[]
}

model ArticleTag {
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     String

  @@id([articleId, tagId])
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  article   Article[]
}
