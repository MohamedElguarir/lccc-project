datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  admin
  user
}

model User {
  id         String    @id @default(cuid())
  first_name String
  last_name  String
  username   String    @unique
  email      String    @unique
  avatar_url String?
  role       Role      @default(user)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  profile    Profile?  @relation(fields: [profileId], references: [id])
  profileId  String?
  posts      Post[]
  comments   Comment[]
}

model Profile {
  id            String      @id @default(cuid())
  userId        String
  bio           String?
  website       String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User[]
  socialLinks   SocialLinks @relation(fields: [socialLinksId], references: [id])
  socialLinksId String
}

model SocialLinks {
  id        String    @id @default(cuid())
  userId    String
  twitter   String?
  facebook  String?
  instagram String?
  github    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  profile   Profile[]
}

model Post {
  id         String    @id @default(cuid())
  title      String
  slug       String    @unique
  excerpt    String
  content    Json
  main_image String?
  approved   Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  author     User      @relation(fields: [userId], references: [id])
  userId     String
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
  tags       PostTag[]
  comments   Comment[]
}

model Comment {
  id        String    @id @default(cuid())
  body      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  Post      Post      @relation(fields: [postId], references: [id])
  postId    String
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  parentId  String?
  children  Comment[] @relation("CommentToComment")
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  posts     PostTag[]
}

model PostTag {
  post   Post   @relation(fields: [postId], references: [id])
  postId String
  tag    Tag    @relation(fields: [tagId], references: [id])
  tagId  String

  @@id([postId, tagId])
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post[]
}
